[gd_scene load_steps=24 format=3 uid="uid://brpgm0ti573i"]

[ext_resource type="Script" path="res://addons/zylann.hterrain/hterrain.gd" id="1_5vqvb"]
[ext_resource type="Script" path="res://units/BaseUnit.gd" id="1_g7n6u"]
[ext_resource type="Resource" path="res://data.hterrain" id="2_ebtfx"]
[ext_resource type="Script" path="res://addons/zylann.hterrain/hterrain_texture_set.gd" id="3_8450p"]
[ext_resource type="Script" path="res://Player.gd" id="4_bb8fh"]
[ext_resource type="Texture2D" uid="uid://cuummrbrakjqr" path="res://textures/a.jpg" id="4_cwgm5"]
[ext_resource type="Texture2D" uid="uid://yyefmppiqak6" path="res://grass.jpg" id="5_x0843"]
[ext_resource type="Texture2D" uid="uid://3dqs83m1ewkw" path="res://textures/c.png" id="6_yxfs1"]
[ext_resource type="Texture2D" uid="uid://dyd41crfprkdq" path="res://textures/d.jpg" id="7_hkety"]
[ext_resource type="PackedScene" uid="uid://cxky0bkbhr6ie" path="res://buildings/bluemain.glb" id="8_8eoc1"]
[ext_resource type="PackedScene" uid="uid://bgt3u5h76lrks" path="res://buildings/bluerecource patch.glb" id="10_hwm1u"]
[ext_resource type="PackedScene" uid="uid://dhhccov57y5ae" path="res://units/bigtank.glb" id="12_406il"]
[ext_resource type="PackedScene" uid="uid://byfwj0n8b6u1c" path="res://buildings/bluepower.glb" id="13_xb4ix"]
[ext_resource type="PackedScene" uid="uid://dk27kudp7oerv" path="res://buildings/bluevision.glb" id="14_wdg8o"]
[ext_resource type="PackedScene" uid="uid://xm3tnddkdwgf" path="res://buildings/blueattackbuilding.glb" id="15_5upf3"]
[ext_resource type="PackedScene" uid="uid://cvayykhxd0e37" path="res://buildings/blueresearch.glb" id="16_5d0ar"]
[ext_resource type="PackedScene" uid="uid://xnugfb27j537" path="res://buildings/blueattackbuildingair.glb" id="17_nsi1b"]
[ext_resource type="PackedScene" uid="uid://dohscwu5ki410" path="res://buildings/bluenukebuilding.glb" id="18_elsp4"]
[ext_resource type="PackedScene" uid="uid://d30mkp3s7m1c" path="res://buildings/bluerecourcebuilding.glb" id="19_1d8dt"]
[ext_resource type="PackedScene" uid="uid://byifj507pr8ex" path="res://units/tank_unit_new.tscn" id="21_yyg5l"]

[sub_resource type="MBrushLayers" id="MBrushLayers_dor76"]
layers_title = "normal"
layers = [{
"ICON": "",
"NAME": "paint",
"color": Color(0.713726, 0.623529, 0.4, 1),
"hardness": 0.9
}]

[sub_resource type="Shader" id="Shader_7b4i8"]
code = "shader_type spatial;

// This is a shader with less textures, in case the main one doesn't run on your GPU.
// It's mostly a big copy/paste, because Godot doesn't support #include or #ifdef...

#include \"include/heightmap.gdshaderinc\"

uniform sampler2D u_terrain_heightmap;
uniform sampler2D u_terrain_normalmap;
// I had to remove `hint_albedo` from colormap in Godot 3 because it makes sRGB conversion kick in,
// which snowballs to black when doing GPU painting on that texture...
uniform sampler2D u_terrain_colormap;// : hint_albedo;
uniform sampler2D u_terrain_splatmap;
uniform mat4 u_terrain_inverse_transform;
uniform mat3 u_terrain_normal_basis;

uniform sampler2D u_ground_albedo_bump_0 : source_color;
uniform sampler2D u_ground_albedo_bump_1 : source_color;
uniform sampler2D u_ground_albedo_bump_2 : source_color;
uniform sampler2D u_ground_albedo_bump_3 : source_color;

uniform float u_ground_uv_scale = 20.0;
uniform bool u_depth_blending = true;
uniform bool u_triplanar = false;
// Each component corresponds to a ground texture. Set greater than zero to enable.
uniform vec4 u_tile_reduction = vec4(0.0, 0.0, 0.0, 0.0);

varying vec4 v_tint;
varying vec4 v_splat;
varying vec3 v_ground_uv;


vec3 unpack_normal(vec4 rgba) {
	vec3 n = rgba.xzy * 2.0 - vec3(1.0);
	// Had to negate Z because it comes from Y in the normal map,
	// and OpenGL-style normal maps are Y-up.
	n.z *= -1.0;
	return n;
}

// Blends weights according to the bump of detail textures,
// so for example it allows to have sand fill the gaps between pebbles
vec4 get_depth_blended_weights(vec4 splat, vec4 bumps) {
	float dh = 0.2;

	vec4 h = bumps + splat;
	
	// TODO Keep improving multilayer blending, there are still some edge cases...
	// Mitigation: nullify layers with near-zero splat
	h *= smoothstep(0, 0.05, splat);
	
	vec4 d = h + dh;
	d.r -= max(h.g, max(h.b, h.a));
	d.g -= max(h.r, max(h.b, h.a));
	d.b -= max(h.g, max(h.r, h.a));
	d.a -= max(h.g, max(h.b, h.r));
	
	return clamp(d, 0, 1);
}

vec3 get_triplanar_blend(vec3 world_normal) {
	vec3 blending = abs(world_normal);
	blending = normalize(max(blending, vec3(0.00001))); // Force weights to sum to 1.0
	float b = blending.x + blending.y + blending.z;
	return blending / vec3(b, b, b);
}

vec4 texture_triplanar(sampler2D tex, vec3 world_pos, vec3 blend) {
	vec4 xaxis = texture(tex, world_pos.yz);
	vec4 yaxis = texture(tex, world_pos.xz);
	vec4 zaxis = texture(tex, world_pos.xy);
	// blend the results of the 3 planar projections.
	return xaxis * blend.x + yaxis * blend.y + zaxis * blend.z;
}

vec4 depth_blend2(vec4 a, vec4 b, float t) {
	// https://www.gamasutra.com
	// /blogs/AndreyMishkinis/20130716/196339/Advanced_Terrain_Texture_Splatting.php
	float d = 0.1;
	float ma = max(a.a + (1.0 - t), b.a + t) - d;
	float ba = max(a.a + (1.0 - t) - ma, 0.0);
	float bb = max(b.a + t - ma, 0.0);
	return (a * ba + b * bb) / (ba + bb);
}

vec4 texture_antitile(sampler2D tex, vec2 uv) {
	float frequency = 2.0;
	float scale = 1.3;
	float sharpness = 0.7;
	
	// Rotate and scale UV
	float rot = 3.14 * 0.6;
	float cosa = cos(rot);
	float sina = sin(rot);
	vec2 uv2 = vec2(cosa * uv.x - sina * uv.y, sina * uv.x + cosa * uv.y) * scale;
	
	vec4 col0 = texture(tex, uv);
	vec4 col1 = texture(tex, uv2);
	//col0 = vec4(0.0, 0.0, 1.0, 1.0);
	// Periodically alternate between the two versions using a warped checker pattern
	float t = 0.5 + 0.5 
		* sin(uv2.x * frequency + sin(uv.x) * 2.0) 
		* cos(uv2.y * frequency + sin(uv.y) * 2.0);
	// Using depth blend because classic alpha blending smoothes out details
	return depth_blend2(col0, col1, smoothstep(0.5 * sharpness, 1.0 - 0.5 * sharpness, t));
}

void vertex() {
	vec2 cell_coords = (u_terrain_inverse_transform * MODEL_MATRIX * vec4(VERTEX, 1)).xz;
	// Must add a half-offset so that we sample the center of pixels,
	// otherwise bilinear filtering of the textures will give us mixed results.
	cell_coords += vec2(0.5);

	// Normalized UV
	UV = cell_coords / vec2(textureSize(u_terrain_heightmap, 0));
	
	// Height displacement
	float h = sample_heightmap(u_terrain_heightmap, UV);
	VERTEX.y = h;

	v_ground_uv = vec3(cell_coords.x, h * MODEL_MATRIX[1][1], cell_coords.y) / u_ground_uv_scale;
	
	// Putting this in vertex saves 2 fetches from the fragment shader,
	// which is good for performance at a negligible quality cost,
	// provided that geometry is a regular grid that decimates with LOD.
	// (downside is LOD will also decimate tint and splat, but it's not bad overall)
	v_tint = texture(u_terrain_colormap, UV);
	v_splat = texture(u_terrain_splatmap, UV);
	
	// Need to use u_terrain_normal_basis to handle scaling.
	NORMAL = u_terrain_normal_basis * unpack_normal(texture(u_terrain_normalmap, UV));
}

void fragment() {
	if (v_tint.a < 0.5) {
		// TODO Add option to use vertex discarding instead, using NaNs
		discard;
	}
	
	vec3 terrain_normal_world = 
		u_terrain_normal_basis * unpack_normal(texture(u_terrain_normalmap, UV));
	terrain_normal_world = normalize(terrain_normal_world);

	// TODO Detail should only be rasterized on nearby chunks (needs proximity management to switch shaders)
	
	vec2 ground_uv = v_ground_uv.xz;
	
	vec4 ab0, ab1, ab2, ab3;
	if (u_triplanar) {
		// Only do triplanar on one texture slot,
		// because otherwise it would be very expensive and cost many more ifs.
		// I chose the last slot because first slot is the default on new splatmaps,
		// and that's a feature used for cliffs, which are usually designed later.

		vec3 blending = get_triplanar_blend(terrain_normal_world);

		ab3 = texture_triplanar(u_ground_albedo_bump_3, v_ground_uv, blending);

	} else {
		if (u_tile_reduction[3] > 0.0) {
			ab3 = texture(u_ground_albedo_bump_3, ground_uv);
		} else {
			ab3 = texture_antitile(u_ground_albedo_bump_3, ground_uv);
		}
	}
	
	if (u_tile_reduction[0] > 0.0) {
		ab0 = texture_antitile(u_ground_albedo_bump_0, ground_uv);
	} else {
		ab0 = texture(u_ground_albedo_bump_0, ground_uv);
	}
	if (u_tile_reduction[1] > 0.0) {
		ab1 = texture_antitile(u_ground_albedo_bump_1, ground_uv);
	} else {
		ab1 = texture(u_ground_albedo_bump_1, ground_uv);
	}
	if (u_tile_reduction[2] > 0.0) {
		ab2 = texture_antitile(u_ground_albedo_bump_2, ground_uv);
	} else {
		ab2 = texture(u_ground_albedo_bump_2, ground_uv);
	}
	
	vec3 col0 = ab0.rgb;
	vec3 col1 = ab1.rgb;
	vec3 col2 = ab2.rgb;
	vec3 col3 = ab3.rgb;
	
	vec4 w;
	// TODO An #ifdef macro would be nice! Or copy/paste everything in a different shader...
	if (u_depth_blending) {
		w = get_depth_blended_weights(v_splat, vec4(ab0.a, ab1.a, ab2.a, ab3.a));
	} else {
		w = v_splat.rgba;
	}
	
	float w_sum = (w.r + w.g + w.b + w.a);
	
	ALBEDO = v_tint.rgb * (
		w.r * col0.rgb + 
		w.g * col1.rgb + 
		w.b * col2.rgb + 
		w.a * col3.rgb) / w_sum;
	
	ROUGHNESS = 1.0;
	
	NORMAL = (VIEW_MATRIX * (vec4(terrain_normal_world, 0.0))).xyz;

	//ALBEDO = w.rgb;
	//ALBEDO = v_ground_uv.xyz;
}

"

[sub_resource type="Resource" id="Resource_y4vng"]
script = ExtResource("3_8450p")
mode = 0
textures = [[ExtResource("4_cwgm5"), ExtResource("5_x0843"), ExtResource("6_yxfs1"), ExtResource("7_hkety")], [ExtResource("4_cwgm5"), ExtResource("5_x0843"), ExtResource("6_yxfs1"), ExtResource("7_hkety")]]
metadata/layer = false

[node name="Main" type="Node3D"]
script = ExtResource("1_g7n6u")

[node name="MTerrain" type="MTerrain" parent="."]
dataDir = "res://"
terrain_size = Vector2i(800, 800)
brush_layers = [SubResource("MBrushLayers_dor76")]
transform = Transform3D(1.5092, 0, 0, 0, 1, 0, 0, 0, 1.46339, 0, 0, 0)

[node name="HTerrain" type="Node3D" parent="MTerrain"]
script = ExtResource("1_5vqvb")
centered = true
_terrain_data = ExtResource("2_ebtfx")
chunk_size = 64
collision_enabled = true
collision_layer = 1
collision_mask = 1
shader_type = "Classic4Lite"
custom_shader = SubResource("Shader_7b4i8")
custom_globalmap_shader = null
texture_set = SubResource("Resource_y4vng")
render_layers = 1
cast_shadow = 1
shader_params/u_ground_uv_scale = 20
shader_params/u_depth_blending = true
shader_params/u_triplanar = null
shader_params/u_tile_reduction = null

[node name="recource" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 233.216, -0.189764, 256.499)
size = Vector3(30, 1, 30)

[node name="recource2" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -288.532, 0.529898, 252.38)
size = Vector3(30, 1, 30)

[node name="recource3" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -289.828, 0.503601, -255.626)
size = Vector3(30, 1, 30)

[node name="recource4" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -49.1098, 1.5108, 72.1026)
size = Vector3(30, 1, 30)

[node name="recource6" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 98.3407, 2.0144, -34.1416)
size = Vector3(30, 1, 30)

[node name="recource7" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3.19748, 3.37189, 8.67522)
size = Vector3(30, 1, 30)

[node name="Player" type="CharacterBody3D" parent="." node_paths=PackedStringArray("cameraPivot")]
transform = Transform3D(0.999289, 0, -0.0377076, 0, 1, 0, 0.0377076, 0, 0.999289, 0, 0, 0)
script = ExtResource("4_bb8fh")
cameraPivot = NodePath("../CameraPivot")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.224418, 0.374011, 0.899863, -0.0167256, -0.924758, 0.380187, 0.97435, 0.07027, 0.213788, 0, 0, 0)

[node name="CameraPivot" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 150, 0)

[node name="Camera3D" type="Camera3D" parent="CameraPivot"]
transform = Transform3D(1, 0, 0, 0, 0.333807, 0.942641, 0, -0.942641, 0.333807, 0, 0, 0)

[node name="main" parent="." instance=ExtResource("8_8eoc1")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 339.793, 8.69763, -306.419)

[node name="recource patch" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 264.869, 0.650242, -238.075)

[node name="recource patch2" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 270.198, 1.90735e-06, -237.724)

[node name="recource patch3" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 257.804, 0, -237.803)

[node name="recource patch4" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 261.177, 0, -244.485)

[node name="recource patch5" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 253.235, 0, -244.371)

[node name="recource patch6" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 251.421, 9.53674e-07, -252.48)

[node name="recource patch7" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 259.684, 0, -251.972)

[node name="recource patch8" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 268.568, -1.90735e-06, -245.213)

[node name="recource patch9" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 267.757, 0, -251.894)

[node name="recource patch10" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 242.121, 0, -250.837)

[node name="recource patch11" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 234.855, 2.38419e-07, -259.522)

[node name="recource patch12" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 243.787, 0, -260.192)

[node name="recource patch13" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 252.448, -1.90735e-06, -260.749)

[node name="recource patch14" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 260.003, 0, -260.84)

[node name="recource patch15" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 237.003, 0, -270.728)

[node name="recource patch16" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 247.6, 0, -269.101)

[node name="recource patch17" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 229.157, 0, -269.384)

[node name="recource patch18" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 225.768, 0, -282.416)

[node name="recource patch19" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 234.678, 0, -280.012)

[node name="recource patch20" parent="." instance=ExtResource("10_hwm1u")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 243.91, 0, -277.576)

[node name="bigtank" parent="." instance=ExtResource("12_406il")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 343.898, 1.19209e-07, -183.382)

[node name="bluepower" parent="." instance=ExtResource("13_xb4ix")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 354.028, 4.12069, -248.804)

[node name="bluevision" parent="." instance=ExtResource("14_wdg8o")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 360.448, 12.7369, -149.611)

[node name="blueattackbuilding" parent="." instance=ExtResource("15_5upf3")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 314.487, 3.5272, -206.106)

[node name="blueresearch" parent="." instance=ExtResource("16_5d0ar")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 355.777, 6.55061, -221.117)

[node name="blueattackbuilding2" parent="." instance=ExtResource("15_5upf3")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 366.094, -1.90735e-06, -212.263)

[node name="blueattackbuildingair" parent="." instance=ExtResource("17_nsi1b")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 357.986, 0, -201.501)

[node name="bluenukebuilding" parent="." instance=ExtResource("18_elsp4")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 312.803, 0, -204.304)

[node name="bluerecourcebuilding" parent="." instance=ExtResource("19_1d8dt")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 291.65, 3.98176, -231.648)

[node name="bluerecourcebuilding2" parent="." instance=ExtResource("19_1d8dt")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 278.383, 3.98176, -261.185)

[node name="bluerecourcebuilding3" parent="." instance=ExtResource("19_1d8dt")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 237.089, 3.98176, -292.948)

[node name="TankUnit" parent="." instance=ExtResource("21_yyg5l")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 294.425, 0, -295.39)

[node name="TankUnit2" parent="." instance=ExtResource("21_yyg5l")]
transform = Transform3D(0.843888, 0, 0.536519, 0, 1, 0, -0.536519, 0, 0.843888, 278.497, 0, -309.342)

[node name="TankUnit3" parent="." instance=ExtResource("21_yyg5l")]
transform = Transform3D(0.850949, 0, 0.525249, 0, 1, 0, -0.525249, 0, 0.850949, 305.955, 0, -267.507)

[node name="TankUnit4" parent="." instance=ExtResource("21_yyg5l")]
transform = Transform3D(0.90479, 0, 0.425858, 0, 1, 0, -0.425858, 0, 0.90479, 323.808, 0, -242.787)

[node name="TankUnit5" parent="." instance=ExtResource("21_yyg5l")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 271.736, 0, -286.858)
